{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pypeln Pypeln (pronounced as \"pypeline\") is a simple yet powerful Python library for creating concurrent data pipelines. Main Features Simple : Pypeln was designed to solve medium data tasks that require parallelism and concurrency where using frameworks like Spark or Dask feels exaggerated or unnatural. Easy-to-use : Pypeln exposes a familiar functional API compatible with regular Python code. Flexible : Pypeln enables you to build pipelines using Processes, Threads and asyncio.Tasks via the exact same API. Fine-grained Control : Pypeln allows you to have control over the memory and cpu resources used at each stage of your pipelines. For more information take a look at the Documentation . Installation Install Pypeln using pip: pip install pypeln Basic Usage With Pypeln you can easily create multi-stage data pipelines using 3 type of workers: Processes You can create a pipeline based on multiprocessing.Process workers by using the process module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . process . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously. Threads You can create a pipeline based on threading.Thread workers by using the thread module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . thread . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Here we have the exact same situation as in the previous case except that the worker are Threads. Tasks You can create a pipeline based on asyncio.Task workers by using the task module: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Conceptually similar but everything is running in a single thread and Task workers are created dynamically. If the code is running inside an async task can use await on the stage instead to avoid blocking: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 def main (): data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = await stage # e.g. [5, 6, 9, 4, 8, 10, 7] asyncio . run ( main ()) Sync The sync module implements all operations using synchronous generators. This module is useful for debugging or when you don't need to perform heavy CPU or IO tasks but still want to retain element order information that certain functions like pl.*.ordered rely on. import pypeln as pl import time from random import random def slow_add1 ( x ): return x + 1 def slow_gt3 ( x ): return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . sync . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # [4, 5, 6, 7, 8, 9, 10] Common arguments such as workers and maxsize are accepted by this module's functions for API compatibility purposes but are ignored. Mixed Pipelines You can create pipelines using different worker types such that each type is the best for its given task so you can get the maximum performance out of your code: data = get_iterable () data = pl . task . map ( f1 , data , workers = 100 ) data = pl . thread . flat_map ( f2 , data , workers = 10 ) data = filter ( f3 , data ) data = pl . process . map ( f4 , data , workers = 5 , maxsize = 200 ) Notice that here we even used a regular python filter , since stages are iterables Pypeln integrates smoothly with any python code, just be aware of how each stage behaves. Pipe Operator In the spirit of being a true pipeline library, Pypeln also lets you create your pipelines using the pipe | operator: data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list ) Run Tests A sample script is provided to run the tests in a container (either Docker or Podman is supported), to run tests: $ bash scripts/run-tests.sh This script can also receive a python version to check test against, i.e $ bash scripts/run-tests.sh 3 .7 Related Stuff Making an Unlimited Number of Requests with Python aiohttp + pypeln Process Pools Making 100 million requests with Python aiohttp Python multiprocessing Queue memory management joblib mpipe Contributors cgarciae Davidnet License MIT","title":"Introduction"},{"location":"#pypeln","text":"Pypeln (pronounced as \"pypeline\") is a simple yet powerful Python library for creating concurrent data pipelines.","title":"Pypeln"},{"location":"#main-features","text":"Simple : Pypeln was designed to solve medium data tasks that require parallelism and concurrency where using frameworks like Spark or Dask feels exaggerated or unnatural. Easy-to-use : Pypeln exposes a familiar functional API compatible with regular Python code. Flexible : Pypeln enables you to build pipelines using Processes, Threads and asyncio.Tasks via the exact same API. Fine-grained Control : Pypeln allows you to have control over the memory and cpu resources used at each stage of your pipelines. For more information take a look at the Documentation .","title":"Main Features"},{"location":"#installation","text":"Install Pypeln using pip: pip install pypeln","title":"Installation"},{"location":"#basic-usage","text":"With Pypeln you can easily create multi-stage data pipelines using 3 type of workers:","title":"Basic Usage"},{"location":"#processes","text":"You can create a pipeline based on multiprocessing.Process workers by using the process module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . process . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously.","title":"Processes"},{"location":"#threads","text":"You can create a pipeline based on threading.Thread workers by using the thread module: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . thread . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Here we have the exact same situation as in the previous case except that the worker are Threads.","title":"Threads"},{"location":"#tasks","text":"You can create a pipeline based on asyncio.Task workers by using the task module: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # e.g. [5, 6, 9, 4, 8, 10, 7] Conceptually similar but everything is running in a single thread and Task workers are created dynamically. If the code is running inside an async task can use await on the stage instead to avoid blocking: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 def main (): data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = await stage # e.g. [5, 6, 9, 4, 8, 10, 7] asyncio . run ( main ())","title":"Tasks"},{"location":"#sync","text":"The sync module implements all operations using synchronous generators. This module is useful for debugging or when you don't need to perform heavy CPU or IO tasks but still want to retain element order information that certain functions like pl.*.ordered rely on. import pypeln as pl import time from random import random def slow_add1 ( x ): return x + 1 def slow_gt3 ( x ): return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . sync . filter ( slow_gt3 , stage , workers = 2 ) data = list ( stage ) # [4, 5, 6, 7, 8, 9, 10] Common arguments such as workers and maxsize are accepted by this module's functions for API compatibility purposes but are ignored.","title":"Sync"},{"location":"#mixed-pipelines","text":"You can create pipelines using different worker types such that each type is the best for its given task so you can get the maximum performance out of your code: data = get_iterable () data = pl . task . map ( f1 , data , workers = 100 ) data = pl . thread . flat_map ( f2 , data , workers = 10 ) data = filter ( f3 , data ) data = pl . process . map ( f4 , data , workers = 5 , maxsize = 200 ) Notice that here we even used a regular python filter , since stages are iterables Pypeln integrates smoothly with any python code, just be aware of how each stage behaves.","title":"Mixed Pipelines"},{"location":"#pipe-operator","text":"In the spirit of being a true pipeline library, Pypeln also lets you create your pipelines using the pipe | operator: data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list )","title":"Pipe Operator"},{"location":"#run-tests","text":"A sample script is provided to run the tests in a container (either Docker or Podman is supported), to run tests: $ bash scripts/run-tests.sh This script can also receive a python version to check test against, i.e $ bash scripts/run-tests.sh 3 .7","title":"Run Tests"},{"location":"#related-stuff","text":"Making an Unlimited Number of Requests with Python aiohttp + pypeln Process Pools Making 100 million requests with Python aiohttp Python multiprocessing Queue memory management joblib mpipe","title":"Related Stuff"},{"location":"#contributors","text":"cgarciae Davidnet","title":"Contributors"},{"location":"#license","text":"MIT","title":"License"},{"location":"advanced/","text":"Advanced Usage Architecture A Pypeln pipeline has the following structure: Its composed of several concurrent stages At each stage it contains one or more worker entities that perform a task. Related stages are connected by a queue , workers from one stage put items into it, and workers from the other stage get items from it. Source stages consume iterables. Sink stages can be converted into iterables which consume them. Stage Types Pypeln has 3 types of stages, each stage has an associated worker and queue types: Stage Type Worker Queue pl.process.Stage multiprocessing.Process multiprocessing.Queue pl.thread.Stage threading.Thread queue.Queue pl.task.Stage asyncio.Task asyncio.Queue Depending on the type of stage you use the following characteristics will vary: memory management, concurrency, parallelism, inter-stage communication overhead, worker initialization overhead: Stage Type Memory Concurrency Parallelism Communication Overhead Initialization Overhead process independent cpu + IO cpu + IO high high thread shared only for IO only for IO none mid task shared optimized IO optimized IO none low Stages Stages are lazy iterable objects that only contain meta information about the computation, to actually execute a pipeline you can iterate over it using a for loop, calling list , pl.<module>.run , etc. For example: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) for x in stage : print ( x ) # e.g. 2, 1, 5, 6, 3, 4, 7, 8, 9, 10 This example uses pl.process but it works the same for all the other modules. Since pypeln implements the Iterable interface it becomes very intuitive to use and compatible with most other python code. Workers Each Stage defines a number of workers which can usually be controlled by the workers parameter on pypeln 's various functions. In general try not to create more workers than the number of cores you have on your machine or else they will end up fighting for resources, but this varies with the type of worker. The following table shows the relative cost in memory + cpu usage of creating each worker: Worker Memory + CPU Cost Process high Thread mid Task low General guidelines: Only use processes when you need to perform heavy CPU operations in pararallel such as image processing, data transformations, etc. When forking a Process all the memory is copied to the new process, intialization is slow, communications between processes is costly since python objects have to be serialized, but you effectly escape the GIL so you gain true parallelism. Threads are very good for doing syncronous IO tasks such as interacting with the OS and libraries that yet don't expose a async API. Tasks are highly optimized for asynchronous IO operations, they are super cheap to create since they are just regular python objects, and you can generally create them in higher quantities since the event loop manages them efficiently for you. Queues Worker communicate between each other through Queues . The maximum number of elements each Queue can hold is controlled by the maxsize parameter in pypeln 's various functions. By default this number is 0 which means there is no limit to the number of elements, however when maxsize is set it serves as a backpressure mechanism that prevents previous stages from pushing new elements to a Queue when it becomes full (reaches its maxsize ), these stages will stop their computation until space becomes available thus potentially preveting OutOfMemeory errors on the slower stages. The following table shows the relative communication cost between workers given the nature of their queues: Worker Communication Cost Process high Thread none Task none General guidelines: Communication between processes is costly since python objects have to be serialized, which has a considerable overhead when passing large objects such as numpy arrays, binary objects, etc. To avoid this overhead try only passing metadata information such as filepaths between processes. There is no overhead in communication between threads or tasks , since everything happens in-memory there is no serialization overhead. Resource Management There are many occasions where you need to create some resource objects (e.g. http or database sessions) that (for efficiency) are expected to last the whole span of each worker's life. To support and effectily manage the lifecycle of such objects most of pypeln s functions accept the on_start and on_done callbacks. When a worker is created its on_start function get called. This function can return a dictionary containing these resource objects which can be consumed as arguments (by name) on the f and on_end functions. For exmaple: import pypeln as pl def on_start (): return dict ( http_session = get_http_session (), db_session = get_db_session (), ) def f ( x , http_session , db_session ): # some logic return y def on_end ( http_session , db_session ): http_session . close () db_session . close () stage = pl . process . map ( f , stage , workers = 3 , on_start = on_start , on_end = on_end ) Dependency Injection Special Arguments worker_info : f , on_start and on_done can define a worker_info argument; an object with information about the worker will be passed. stage_status : on_end can define a stage_status argument; an object with information about the stage will be passed. element_index : f can define a element_index argument; a tuple representing the index of the element will be passed, this index represents the order of creation of the element on the original/source iterable and is the underlying mechanism by which the ordered operation is implemented. Usually it will be a tuple of a single element, but operations like flat_map add an additional index dimension in order to properly keep track of the order. User Defined Any element in the dictionary returned by on_start can be consumed as an argument by f and on_done . Pipe Operator Most functions can return a Partial instead of a Stage if the stage argument is not given. These Partial s are callables that accept the missing stage parameter and call the computation. The following expressions are equivalent: pl.process.map(f, stage, **kwargs) <=> pl.process.map(f, **kwargs)(stage) Partial implements the pipe | operator as x | partial <=> partial(x) This allows pypeln to enable you to define your pipelines more fluently: from pypeln import process as pr data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list )","title":"Advanced Usage"},{"location":"advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"advanced/#architecture","text":"A Pypeln pipeline has the following structure: Its composed of several concurrent stages At each stage it contains one or more worker entities that perform a task. Related stages are connected by a queue , workers from one stage put items into it, and workers from the other stage get items from it. Source stages consume iterables. Sink stages can be converted into iterables which consume them.","title":"Architecture"},{"location":"advanced/#stage-types","text":"Pypeln has 3 types of stages, each stage has an associated worker and queue types: Stage Type Worker Queue pl.process.Stage multiprocessing.Process multiprocessing.Queue pl.thread.Stage threading.Thread queue.Queue pl.task.Stage asyncio.Task asyncio.Queue Depending on the type of stage you use the following characteristics will vary: memory management, concurrency, parallelism, inter-stage communication overhead, worker initialization overhead: Stage Type Memory Concurrency Parallelism Communication Overhead Initialization Overhead process independent cpu + IO cpu + IO high high thread shared only for IO only for IO none mid task shared optimized IO optimized IO none low","title":"Stage Types"},{"location":"advanced/#stages","text":"Stages are lazy iterable objects that only contain meta information about the computation, to actually execute a pipeline you can iterate over it using a for loop, calling list , pl.<module>.run , etc. For example: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) for x in stage : print ( x ) # e.g. 2, 1, 5, 6, 3, 4, 7, 8, 9, 10 This example uses pl.process but it works the same for all the other modules. Since pypeln implements the Iterable interface it becomes very intuitive to use and compatible with most other python code.","title":"Stages"},{"location":"advanced/#workers","text":"Each Stage defines a number of workers which can usually be controlled by the workers parameter on pypeln 's various functions. In general try not to create more workers than the number of cores you have on your machine or else they will end up fighting for resources, but this varies with the type of worker. The following table shows the relative cost in memory + cpu usage of creating each worker: Worker Memory + CPU Cost Process high Thread mid Task low General guidelines: Only use processes when you need to perform heavy CPU operations in pararallel such as image processing, data transformations, etc. When forking a Process all the memory is copied to the new process, intialization is slow, communications between processes is costly since python objects have to be serialized, but you effectly escape the GIL so you gain true parallelism. Threads are very good for doing syncronous IO tasks such as interacting with the OS and libraries that yet don't expose a async API. Tasks are highly optimized for asynchronous IO operations, they are super cheap to create since they are just regular python objects, and you can generally create them in higher quantities since the event loop manages them efficiently for you.","title":"Workers"},{"location":"advanced/#queues","text":"Worker communicate between each other through Queues . The maximum number of elements each Queue can hold is controlled by the maxsize parameter in pypeln 's various functions. By default this number is 0 which means there is no limit to the number of elements, however when maxsize is set it serves as a backpressure mechanism that prevents previous stages from pushing new elements to a Queue when it becomes full (reaches its maxsize ), these stages will stop their computation until space becomes available thus potentially preveting OutOfMemeory errors on the slower stages. The following table shows the relative communication cost between workers given the nature of their queues: Worker Communication Cost Process high Thread none Task none General guidelines: Communication between processes is costly since python objects have to be serialized, which has a considerable overhead when passing large objects such as numpy arrays, binary objects, etc. To avoid this overhead try only passing metadata information such as filepaths between processes. There is no overhead in communication between threads or tasks , since everything happens in-memory there is no serialization overhead.","title":"Queues"},{"location":"advanced/#resource-management","text":"There are many occasions where you need to create some resource objects (e.g. http or database sessions) that (for efficiency) are expected to last the whole span of each worker's life. To support and effectily manage the lifecycle of such objects most of pypeln s functions accept the on_start and on_done callbacks. When a worker is created its on_start function get called. This function can return a dictionary containing these resource objects which can be consumed as arguments (by name) on the f and on_end functions. For exmaple: import pypeln as pl def on_start (): return dict ( http_session = get_http_session (), db_session = get_db_session (), ) def f ( x , http_session , db_session ): # some logic return y def on_end ( http_session , db_session ): http_session . close () db_session . close () stage = pl . process . map ( f , stage , workers = 3 , on_start = on_start , on_end = on_end )","title":"Resource Management"},{"location":"advanced/#dependency-injection","text":"Special Arguments worker_info : f , on_start and on_done can define a worker_info argument; an object with information about the worker will be passed. stage_status : on_end can define a stage_status argument; an object with information about the stage will be passed. element_index : f can define a element_index argument; a tuple representing the index of the element will be passed, this index represents the order of creation of the element on the original/source iterable and is the underlying mechanism by which the ordered operation is implemented. Usually it will be a tuple of a single element, but operations like flat_map add an additional index dimension in order to properly keep track of the order. User Defined Any element in the dictionary returned by on_start can be consumed as an argument by f and on_done .","title":"Dependency Injection"},{"location":"advanced/#pipe-operator","text":"Most functions can return a Partial instead of a Stage if the stage argument is not given. These Partial s are callables that accept the missing stage parameter and call the computation. The following expressions are equivalent: pl.process.map(f, stage, **kwargs) <=> pl.process.map(f, **kwargs)(stage) Partial implements the pipe | operator as x | partial <=> partial(x) This allows pypeln to enable you to define your pipelines more fluently: from pypeln import process as pr data = ( range ( 10 ) | pl . process . map ( slow_add1 , workers = 3 , maxsize = 4 ) | pl . process . filter ( slow_gt3 , workers = 2 ) | list )","title":"Pipe Operator"},{"location":"api/process/Overview/","text":"pl.process The process module lets you create pipelines using objects from python's multiprocessing module according to Pypeln's general architecture . Use this module when you are in need of true parallelism for CPU heavy operations but be aware of its implications. Most functions in this module return a pl.process.Stage object which implement the Iterable interface which enables you to combine it seamlessly with regular Python code. Iterable You can iterate over any p.process.Stage to get back the results of its computation: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . process . filter ( slow_gt3 , stage , workers = 2 ) for x in stage : print ( x ) # e.g. 5, 6, 9, 4, 8, 10, 7 At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously. Members concat each filter flat_map from_iterable map ordered run to_iterable","title":"Overview"},{"location":"api/process/Overview/#plprocess","text":"The process module lets you create pipelines using objects from python's multiprocessing module according to Pypeln's general architecture . Use this module when you are in need of true parallelism for CPU heavy operations but be aware of its implications. Most functions in this module return a pl.process.Stage object which implement the Iterable interface which enables you to combine it seamlessly with regular Python code.","title":"pl.process"},{"location":"api/process/Overview/#pypeln.process--iterable","text":"You can iterate over any p.process.Stage to get back the results of its computation: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . process . filter ( slow_gt3 , stage , workers = 2 ) for x in stage : print ( x ) # e.g. 5, 6, 9, 4, 8, 10, 7 At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously.","title":"Iterable"},{"location":"api/process/Overview/#members","text":"concat each filter flat_map from_iterable map ordered run to_iterable","title":"Members"},{"location":"api/process/concat/","text":"pl.process.concat Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . process . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters: Name Type Description Default stages List[Union[pypeln.process.stage.Stage[~A], Iterable[~A]]] A list of Stage or Iterable. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Stage A stage object. Source code in pypeln/process/api/concat.py def concat ( stages : tp . List [ tp . Union [ Stage [ A ], tp . Iterable [ A ]]], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.process.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: A list of Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" dependencies = [ to_stage ( stage , maxsize = maxsize ) for stage in stages ] return Stage ( process_fn = Concat (), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = sum ( stage . workers for stage in dependencies ), dependencies = dependencies , on_start = None , on_done = None , use_threads = False , f_args = [], )","title":"concat"},{"location":"api/process/concat/#plprocessconcat","text":"Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . process . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters: Name Type Description Default stages List[Union[pypeln.process.stage.Stage[~A], Iterable[~A]]] A list of Stage or Iterable. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Stage A stage object. Source code in pypeln/process/api/concat.py def concat ( stages : tp . List [ tp . Union [ Stage [ A ], tp . Iterable [ A ]]], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.process.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: A list of Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" dependencies = [ to_stage ( stage , maxsize = maxsize ) for stage in stages ] return Stage ( process_fn = Concat (), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = sum ( stage . workers for stage in dependencies ), dependencies = dependencies , on_start = None , on_done = None , use_threads = False , f_args = [], )","title":"pl.process.concat"},{"location":"api/process/each/","text":"pl.process.each Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . process . each ( process_image , file_paths , workers = 4 ) pl . process . run ( stage ) or alternatively files_paths = get_file_paths () pl . process . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f EachFn A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Returns: Type Description Union[pypeln.process.stage.Stage[~B], NoneType, pypeln.utils.Partial[Union[pypeln.process.stage.Stage[~B]]]] If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . Source code in pypeln/process/api/each.py def each ( f : EachFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , run : bool = False , ) -> tp . Union [ tp . Optional [ Stage [ B ]], pypeln_utils . Partial [ tp . Optional [ Stage [ B ]]]]: \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.process.each(process_image, file_paths, workers=4) pl.process.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.process.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) stage = Stage ( process_fn = Each ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , use_threads = False , f_args = pypeln_utils . function_args ( f ), ) if not run : return stage for _ in stage : pass","title":"each"},{"location":"api/process/each/#plprocesseach","text":"Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . process . each ( process_image , file_paths , workers = 4 ) pl . process . run ( stage ) or alternatively files_paths = get_file_paths () pl . process . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f EachFn A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Returns: Type Description Union[pypeln.process.stage.Stage[~B], NoneType, pypeln.utils.Partial[Union[pypeln.process.stage.Stage[~B]]]] If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . Source code in pypeln/process/api/each.py def each ( f : EachFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , run : bool = False , ) -> tp . Union [ tp . Optional [ Stage [ B ]], pypeln_utils . Partial [ tp . Optional [ Stage [ B ]]]]: \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.process.each(process_image, file_paths, workers=4) pl.process.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.process.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) stage = Stage ( process_fn = Each ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , use_threads = False , f_args = pypeln_utils . function_args ( f ), ) if not run : return stage for _ in stage : pass","title":"pl.process.each"},{"location":"api/process/filter/","text":"pl.process.filter Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f FilterFn A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.process.stage.Stage[~B], pypeln.utils.Partial[pypeln.process.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/process/api/filter.py def filter ( f : FilterFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Filter ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , use_threads = False , f_args = pypeln_utils . function_args ( f ), )","title":"filter"},{"location":"api/process/filter/#plprocessfilter","text":"Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f FilterFn A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.process.stage.Stage[~B], pypeln.utils.Partial[pypeln.process.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/process/api/filter.py def filter ( f : FilterFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Filter ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , use_threads = False , f_args = pypeln_utils . function_args ( f ), )","title":"pl.process.filter"},{"location":"api/process/flat_map/","text":"pl.process.flat_map Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . process . map ( f , stage ) = pl . process . flat_map ( lambda x : [ f ( x )], stage ) pl . process . filter ( f , stage ) = pl . process . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters: Name Type Description Default f FlatMapFn A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.process.stage.Stage[~B], pypeln.utils.Partial[pypeln.process.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/process/api/flat_map.py def flat_map ( f : FlatMapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.process.map(f, stage) = pl.process.flat_map(lambda x: [f(x)], stage) pl.process.filter(f, stage) = pl.process.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = FlatMap ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , use_threads = False , f_args = pypeln_utils . function_args ( f ), )","title":"flat_map"},{"location":"api/process/flat_map/#plprocessflat_map","text":"Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . process . map ( f , stage ) = pl . process . flat_map ( lambda x : [ f ( x )], stage ) pl . process . filter ( f , stage ) = pl . process . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters: Name Type Description Default f FlatMapFn A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.process.stage.Stage[~B], pypeln.utils.Partial[pypeln.process.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/process/api/flat_map.py def flat_map ( f : FlatMapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.process.map(f, stage) = pl.process.flat_map(lambda x: [f(x)], stage) pl.process.filter(f, stage) = pl.process.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = FlatMap ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , use_threads = False , f_args = pypeln_utils . function_args ( f ), )","title":"pl.process.flat_map"},{"location":"api/process/from_iterable/","text":"pl.process.from_iterable Creates a stage from an iterable. Parameters: Name Type Description Default iterable Union[Iterable[~T], pypeln.utils.Undefined] A source Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> use_thread bool If set to True (default) it will use a thread instead of a process to consume the iterable. Threads start faster and use thread memory to the iterable is not serialized, however, if the iterable is going to perform slow computations it better to use a process. True Returns: Type Description Union[pypeln.process.stage.Stage[~T], pypeln.utils.Partial[pypeln.process.stage.Stage[~T]]] Returns a Stage if the iterable parameters is given, else it returns a Partial . Source code in pypeln/process/api/from_iterable.py def from_iterable ( iterable : tp . Union [ tp . Iterable [ T ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , use_thread : bool = True , maxsize : int = 0 , ) -> tp . Union [ Stage [ T ], pypeln_utils . Partial [ Stage [ T ]]]: \"\"\" Creates a stage from an iterable. Arguments: iterable: A source Iterable. use_thread: If set to `True` (default) it will use a thread instead of a process to consume the iterable. Threads start faster and use thread memory to the iterable is not serialized, however, if the iterable is going to perform slow computations it better to use a process. Returns: Returns a `Stage` if the `iterable` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( iterable , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , use_thread = use_thread ) ) return Stage ( process_fn = FromIterable ( iterable , maxsize = maxsize ), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = 1 , dependencies = [], on_start = None , on_done = None , use_threads = use_thread , f_args = [], )","title":"from_iterable"},{"location":"api/process/from_iterable/#plprocessfrom_iterable","text":"Creates a stage from an iterable. Parameters: Name Type Description Default iterable Union[Iterable[~T], pypeln.utils.Undefined] A source Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> use_thread bool If set to True (default) it will use a thread instead of a process to consume the iterable. Threads start faster and use thread memory to the iterable is not serialized, however, if the iterable is going to perform slow computations it better to use a process. True Returns: Type Description Union[pypeln.process.stage.Stage[~T], pypeln.utils.Partial[pypeln.process.stage.Stage[~T]]] Returns a Stage if the iterable parameters is given, else it returns a Partial . Source code in pypeln/process/api/from_iterable.py def from_iterable ( iterable : tp . Union [ tp . Iterable [ T ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , use_thread : bool = True , maxsize : int = 0 , ) -> tp . Union [ Stage [ T ], pypeln_utils . Partial [ Stage [ T ]]]: \"\"\" Creates a stage from an iterable. Arguments: iterable: A source Iterable. use_thread: If set to `True` (default) it will use a thread instead of a process to consume the iterable. Threads start faster and use thread memory to the iterable is not serialized, however, if the iterable is going to perform slow computations it better to use a process. Returns: Returns a `Stage` if the `iterable` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( iterable , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , use_thread = use_thread ) ) return Stage ( process_fn = FromIterable ( iterable , maxsize = maxsize ), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = 1 , dependencies = [], on_start = None , on_done = None , use_threads = use_thread , f_args = [], )","title":"pl.process.from_iterable"},{"location":"api/process/map/","text":"pl.process.map Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f MapFn A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.process.stage.Stage[~B], pypeln.utils.Partial[pypeln.process.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/process/api/map.py def map ( f : MapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Map ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , use_threads = False , f_args = pypeln_utils . function_args ( f ), )","title":"map"},{"location":"api/process/map/#plprocessmap","text":"Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f MapFn A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.process.stage.Stage[~B], pypeln.utils.Partial[pypeln.process.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/process/api/map.py def map ( f : MapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Map ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , use_threads = False , f_args = pypeln_utils . function_args ( f ), )","title":"pl.process.map"},{"location":"api/process/ordered/","text":"pl.process.ordered Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . process . map ( slow_squared , stage , workers = 2 ) stage = pl . process . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters: Name Type Description Default stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Union[pypeln.process.stage.Stage[~A], pypeln.utils.Partial[pypeln.process.stage.Stage[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/process/api/ordered.py def ordered ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.process.map(slow_squared, stage, workers = 2) stage = pl.process.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : ordered ( stage )) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Ordered (), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = stage . workers , dependencies = [ stage ], on_start = None , on_done = None , use_threads = False , f_args = [], )","title":"ordered"},{"location":"api/process/ordered/#plprocessordered","text":"Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . process . map ( slow_squared , stage , workers = 2 ) stage = pl . process . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters: Name Type Description Default stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Union[pypeln.process.stage.Stage[~A], pypeln.utils.Partial[pypeln.process.stage.Stage[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/process/api/ordered.py def ordered ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.process.map(slow_squared, stage, workers = 2) stage = pl.process.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : ordered ( stage )) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Ordered (), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = stage . workers , dependencies = [ stage ], on_start = None , on_done = None , use_threads = False , f_args = [], )","title":"pl.process.ordered"},{"location":"api/process/run/","text":"pl.process.run Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . process . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . process . run ( stage ) Parameters: Name Type Description Default stages Union[pypeln.process.stage.Stage[~A], Iterable[~A]] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. () maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Source code in pypeln/process/api/run.py def run ( * stages : tp . Union [ Stage [ A ], tp . Iterable [ A ]], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.process.each(slow_fn, data, workers=6) # execute pipeline pl.process.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if len ( stages ) == 0 : return elif len ( stages ) == 1 : stage = to_iterable ( stages [ 0 ], maxsize = maxsize ) else : stage = concat ( list ( stages ), maxsize = maxsize ) for _ in stage : pass","title":"run"},{"location":"api/process/run/#plprocessrun","text":"Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . process . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . process . run ( stage ) Parameters: Name Type Description Default stages Union[pypeln.process.stage.Stage[~A], Iterable[~A]] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. () maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Source code in pypeln/process/api/run.py def run ( * stages : tp . Union [ Stage [ A ], tp . Iterable [ A ]], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.process.each(slow_fn, data, workers=6) # execute pipeline pl.process.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if len ( stages ) == 0 : return elif len ( stages ) == 1 : stage = to_iterable ( stages [ 0 ], maxsize = maxsize ) else : stage = concat ( list ( stages ), maxsize = maxsize ) for _ in stage : pass","title":"pl.process.run"},{"location":"api/process/to_iterable/","text":"pl.process.to_iterable Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the maxsize argument can help you avoid OOM error if the consumer is slow. Parameters: Name Type Description Default stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the output queue can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 return_index bool When set to True the resulting iterable will yield the Elemen(index: Tuple[int, ...], value: Any) which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. False Returns: Type Description Union[Iterable[~A], pypeln.utils.Partial[Iterable[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/process/api/to_iterable.py def to_iterable ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False , ) -> tp . Union [ tp . Iterable [ A ], pypeln_utils . Partial [ tp . Iterable [ A ]]]: \"\"\" Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the `maxsize` argument can help you avoid OOM error if the consumer is slow. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the output queue can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. return_index: When set to `True` the resulting iterable will yield the `Elemen(index: Tuple[int, ...], value: Any)` which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable","title":"to_iterable"},{"location":"api/process/to_iterable/#plprocessto_iterable","text":"Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the maxsize argument can help you avoid OOM error if the consumer is slow. Parameters: Name Type Description Default stage Union[pypeln.process.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the output queue can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 return_index bool When set to True the resulting iterable will yield the Elemen(index: Tuple[int, ...], value: Any) which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. False Returns: Type Description Union[Iterable[~A], pypeln.utils.Partial[Iterable[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/process/api/to_iterable.py def to_iterable ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False , ) -> tp . Union [ tp . Iterable [ A ], pypeln_utils . Partial [ tp . Iterable [ A ]]]: \"\"\" Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the `maxsize` argument can help you avoid OOM error if the consumer is slow. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the output queue can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. return_index: When set to `True` the resulting iterable will yield the `Elemen(index: Tuple[int, ...], value: Any)` which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable","title":"pl.process.to_iterable"},{"location":"api/sync/Overview/","text":"pl.sync The sync module follows same API as the rest of the modules but runs the code synchronously using regular python generators. Use functions from this module when you don't need to perform heavy CPU or IO tasks but still want to retain element order information that certain functions like pl.*.ordered rely on. Common arguments such as workers and maxsize are accepted by this module's functions for API compatibility purposes but are ignored. Most functions in this module return a pl.sync.Stage which is a regular Iterable interface which enables you to combine it seamlessly with regular Python code. Iterable You can iterate over any p.sync.Stage to get back the results of its computation: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . sync . filter ( slow_gt3 , stage , workers = 2 ) for x in stage : print ( x ) # e.g. 5, 6, 9, 4, 8, 10, 7 Members concat each filter flat_map from_iterable map ordered run to_iterable","title":"Overview"},{"location":"api/sync/Overview/#plsync","text":"The sync module follows same API as the rest of the modules but runs the code synchronously using regular python generators. Use functions from this module when you don't need to perform heavy CPU or IO tasks but still want to retain element order information that certain functions like pl.*.ordered rely on. Common arguments such as workers and maxsize are accepted by this module's functions for API compatibility purposes but are ignored. Most functions in this module return a pl.sync.Stage which is a regular Iterable interface which enables you to combine it seamlessly with regular Python code.","title":"pl.sync"},{"location":"api/sync/Overview/#pypeln.sync--iterable","text":"You can iterate over any p.sync.Stage to get back the results of its computation: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . sync . filter ( slow_gt3 , stage , workers = 2 ) for x in stage : print ( x ) # e.g. 5, 6, 9, 4, 8, 10, 7","title":"Iterable"},{"location":"api/sync/Overview/#members","text":"concat each filter flat_map from_iterable map ordered run to_iterable","title":"Members"},{"location":"api/sync/concat/","text":"pl.sync.concat Concatenates / merges many stages into a single one by appending elements from each stage in order, that is, it yields an element from the frist stage, then an element from the second stage and so on until it reaches the last stage and starts again. When a stage has no more elements its taken out of the process. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . sync . concat ([ stage_1 , stage_2 ]) # [1, 4, 2, 5, 3, 6, 7] Parameters: Name Type Description Default stages List[Union[pypeln.sync.stage.Stage[~A], Iterable[~A]]] A list of Stage or Iterable. required maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 Returns: Type Description Stage A stage object. Source code in pypeln/sync/api/concat.py def concat ( stages : tp . List [ tp . Union [ Stage [ A ], tp . Iterable [ A ]]], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage in order, that is, it yields an element from the frist stage, then an element from the second stage and so on until it reaches the last stage and starts again. When a stage has no more elements its taken out of the process. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.sync.concat([stage_1, stage_2]) # [1, 4, 2, 5, 3, 6, 7] ``` Arguments: stages: A list of Stage or Iterable. maxsize: This parameter is not used and only kept for API compatibility with the other modules. Returns: A stage object. \"\"\" dependencies = [ to_stage ( stage , maxsize = maxsize ) for stage in stages ] return Stage ( process_fn = Concat (), timeout = 0 , dependencies = dependencies , on_start = None , on_done = None , f_args = [], )","title":"concat"},{"location":"api/sync/concat/#plsyncconcat","text":"Concatenates / merges many stages into a single one by appending elements from each stage in order, that is, it yields an element from the frist stage, then an element from the second stage and so on until it reaches the last stage and starts again. When a stage has no more elements its taken out of the process. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . sync . concat ([ stage_1 , stage_2 ]) # [1, 4, 2, 5, 3, 6, 7] Parameters: Name Type Description Default stages List[Union[pypeln.sync.stage.Stage[~A], Iterable[~A]]] A list of Stage or Iterable. required maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 Returns: Type Description Stage A stage object. Source code in pypeln/sync/api/concat.py def concat ( stages : tp . List [ tp . Union [ Stage [ A ], tp . Iterable [ A ]]], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage in order, that is, it yields an element from the frist stage, then an element from the second stage and so on until it reaches the last stage and starts again. When a stage has no more elements its taken out of the process. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.sync.concat([stage_1, stage_2]) # [1, 4, 2, 5, 3, 6, 7] ``` Arguments: stages: A list of Stage or Iterable. maxsize: This parameter is not used and only kept for API compatibility with the other modules. Returns: A stage object. \"\"\" dependencies = [ to_stage ( stage , maxsize = maxsize ) for stage in stages ] return Stage ( process_fn = Concat (), timeout = 0 , dependencies = dependencies , on_start = None , on_done = None , f_args = [], )","title":"pl.sync.concat"},{"location":"api/sync/each/","text":"pl.sync.each Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . sync . each ( process_image , file_paths , workers = 4 ) pl . sync . run ( stage ) or alternatively files_paths = get_file_paths () pl . sync . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f EachFn A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Warning To implement timeout we use stopit.ThreadingTimeout which has some limitations. Returns: Type Description Union[pypeln.sync.stage.Stage[NoneType], NoneType, pypeln.utils.Partial[Union[pypeln.sync.stage.Stage[NoneType]]]] If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . Source code in pypeln/sync/api/each.py def each ( f : EachFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , run : bool = False , ) -> tp . Union [ tp . Optional [ Stage [ None ]], pypeln_utils . Partial [ tp . Optional [ Stage [ None ]]]]: \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.sync.each(process_image, file_paths, workers=4) pl.sync.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.sync.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. !!! warning To implement `timeout` we use `stopit.ThreadingTimeout` which has some limitations. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage_ = to_stage ( stage , maxsize = maxsize ) stage_ = Stage ( process_fn = Each ( f ), timeout = timeout , dependencies = [ stage_ ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), ) if not run : return stage_ for _ in stage_ : pass","title":"each"},{"location":"api/sync/each/#plsynceach","text":"Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . sync . each ( process_image , file_paths , workers = 4 ) pl . sync . run ( stage ) or alternatively files_paths = get_file_paths () pl . sync . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f EachFn A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Warning To implement timeout we use stopit.ThreadingTimeout which has some limitations. Returns: Type Description Union[pypeln.sync.stage.Stage[NoneType], NoneType, pypeln.utils.Partial[Union[pypeln.sync.stage.Stage[NoneType]]]] If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . Source code in pypeln/sync/api/each.py def each ( f : EachFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , run : bool = False , ) -> tp . Union [ tp . Optional [ Stage [ None ]], pypeln_utils . Partial [ tp . Optional [ Stage [ None ]]]]: \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.sync.each(process_image, file_paths, workers=4) pl.sync.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.sync.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. !!! warning To implement `timeout` we use `stopit.ThreadingTimeout` which has some limitations. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage_ = to_stage ( stage , maxsize = maxsize ) stage_ = Stage ( process_fn = Each ( f ), timeout = timeout , dependencies = [ stage_ ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), ) if not run : return stage_ for _ in stage_ : pass","title":"pl.sync.each"},{"location":"api/sync/filter/","text":"pl.sync.filter Creates a stage that filter the data given a predicate function f . exactly like python's built-in filter function. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # [3, 4, 5, ..., 9] Parameters: Name Type Description Default f FilterFn A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.ThreadingTimeout which has some limitations. Returns: Type Description Union[pypeln.sync.stage.Stage[~B], pypeln.utils.Partial[pypeln.sync.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/sync/api/filter.py def filter ( f : FilterFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that filter the data given a predicate function `f`. exactly like python's built-in `filter` function. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # [3, 4, 5, ..., 9] ``` Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.ThreadingTimeout` which has some limitations. Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage_ = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Filter ( f ), timeout = timeout , dependencies = [ stage_ ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"filter"},{"location":"api/sync/filter/#plsyncfilter","text":"Creates a stage that filter the data given a predicate function f . exactly like python's built-in filter function. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # [3, 4, 5, ..., 9] Parameters: Name Type Description Default f FilterFn A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.ThreadingTimeout which has some limitations. Returns: Type Description Union[pypeln.sync.stage.Stage[~B], pypeln.utils.Partial[pypeln.sync.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/sync/api/filter.py def filter ( f : FilterFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that filter the data given a predicate function `f`. exactly like python's built-in `filter` function. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # [3, 4, 5, ..., 9] ``` Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.ThreadingTimeout` which has some limitations. Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage_ = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Filter ( f ), timeout = timeout , dependencies = [ stage_ ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.sync.filter"},{"location":"api/sync/flat_map/","text":"pl.sync.flat_map Creates a stage that maps a function f over the data, however unlike pypeln.sync.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # [0, 1, -1, 2, -2, ..., 9, -9] flat_map is a more general operation, you can actually implement pypeln.sync.map and pypeln.sync.filter with it, for example: import pypeln as pl pl . sync . map ( f , stage ) = pl . sync . flat_map ( lambda x : [ f ( x )], stage ) pl . sync . filter ( f , stage ) = pl . sync . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters: Name Type Description Default f FlatMapFn A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.ThreadingTimeout which has some limitations. Returns: Type Description Union[pypeln.sync.stage.Stage[~B], pypeln.utils.Partial[pypeln.sync.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/sync/api/flat_map.py def flat_map ( f : FlatMapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.sync.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # [0, 1, -1, 2, -2, ..., 9, -9] ``` `flat_map` is a more general operation, you can actually implement `pypeln.sync.map` and `pypeln.sync.filter` with it, for example: ```python import pypeln as pl pl.sync.map(f, stage) = pl.sync.flat_map(lambda x: [f(x)], stage) pl.sync.filter(f, stage) = pl.sync.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.ThreadingTimeout` which has some limitations. Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage_ = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = FlatMap ( f ), timeout = timeout , dependencies = [ stage_ ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"flat_map"},{"location":"api/sync/flat_map/#plsyncflat_map","text":"Creates a stage that maps a function f over the data, however unlike pypeln.sync.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # [0, 1, -1, 2, -2, ..., 9, -9] flat_map is a more general operation, you can actually implement pypeln.sync.map and pypeln.sync.filter with it, for example: import pypeln as pl pl . sync . map ( f , stage ) = pl . sync . flat_map ( lambda x : [ f ( x )], stage ) pl . sync . filter ( f , stage ) = pl . sync . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters: Name Type Description Default f FlatMapFn A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.ThreadingTimeout which has some limitations. Returns: Type Description Union[pypeln.sync.stage.Stage[~B], pypeln.utils.Partial[pypeln.sync.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/sync/api/flat_map.py def flat_map ( f : FlatMapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.sync.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # [0, 1, -1, 2, -2, ..., 9, -9] ``` `flat_map` is a more general operation, you can actually implement `pypeln.sync.map` and `pypeln.sync.filter` with it, for example: ```python import pypeln as pl pl.sync.map(f, stage) = pl.sync.flat_map(lambda x: [f(x)], stage) pl.sync.filter(f, stage) = pl.sync.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.ThreadingTimeout` which has some limitations. Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage_ = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = FlatMap ( f ), timeout = timeout , dependencies = [ stage_ ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.sync.flat_map"},{"location":"api/sync/from_iterable/","text":"pl.sync.from_iterable Creates a stage from an iterable. Parameters: Name Type Description Default iterable Union[Iterable[~T], pypeln.utils.Undefined] A source Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> use_thread bool This parameter is not used and only kept for API compatibility with the other modules. True Returns: Type Description Union[pypeln.sync.stage.Stage[~T], pypeln.utils.Partial[pypeln.sync.stage.Stage[~T]]] Returns a Stage if the iterable parameters is given, else it returns a Partial . Source code in pypeln/sync/api/from_iterable.py def from_iterable ( iterable : tp . Union [ tp . Iterable [ T ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , use_thread : bool = True , maxsize : int = 0 , ) -> tp . Union [ Stage [ T ], pypeln_utils . Partial [ Stage [ T ]]]: \"\"\" Creates a stage from an iterable. Arguments: iterable: A source Iterable. use_thread: This parameter is not used and only kept for API compatibility with the other modules. Returns: Returns a `Stage` if the `iterable` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( iterable , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable )) return Stage ( process_fn = FromIterable ( iterable , maxsize = maxsize ), timeout = 0 , dependencies = [], on_start = None , on_done = None , f_args = [], )","title":"from_iterable"},{"location":"api/sync/from_iterable/#plsyncfrom_iterable","text":"Creates a stage from an iterable. Parameters: Name Type Description Default iterable Union[Iterable[~T], pypeln.utils.Undefined] A source Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> use_thread bool This parameter is not used and only kept for API compatibility with the other modules. True Returns: Type Description Union[pypeln.sync.stage.Stage[~T], pypeln.utils.Partial[pypeln.sync.stage.Stage[~T]]] Returns a Stage if the iterable parameters is given, else it returns a Partial . Source code in pypeln/sync/api/from_iterable.py def from_iterable ( iterable : tp . Union [ tp . Iterable [ T ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , use_thread : bool = True , maxsize : int = 0 , ) -> tp . Union [ Stage [ T ], pypeln_utils . Partial [ Stage [ T ]]]: \"\"\" Creates a stage from an iterable. Arguments: iterable: A source Iterable. use_thread: This parameter is not used and only kept for API compatibility with the other modules. Returns: Returns a `Stage` if the `iterable` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( iterable , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable )) return Stage ( process_fn = FromIterable ( iterable , maxsize = maxsize ), timeout = 0 , dependencies = [], on_start = None , on_done = None , f_args = [], )","title":"pl.sync.from_iterable"},{"location":"api/sync/map/","text":"pl.sync.map Creates a stage that maps a function f over the data. Its should behave exactly like python's built-in map function. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # [1, 2, 3, ..., 10] Parameters: Name Type Description Default f MapFn A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.ThreadingTimeout which has some limitations. Returns: Type Description Union[pypeln.sync.stage.Stage[~B], pypeln.utils.Partial[pypeln.sync.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/sync/api/map.py def map ( f : MapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data. Its should behave exactly like python's built-in `map` function. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # [1, 2, 3, ..., 10] ``` Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.ThreadingTimeout` which has some limitations. Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage_ = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Map ( f ), timeout = timeout , dependencies = [ stage_ ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"map"},{"location":"api/sync/map/#plsyncmap","text":"Creates a stage that maps a function f over the data. Its should behave exactly like python's built-in map function. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . sync . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # [1, 2, 3, ..., 10] Parameters: Name Type Description Default f MapFn A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int This parameter is not used and only kept for API compatibility with the other modules. 1 maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Warning To implement timeout we use stopit.ThreadingTimeout which has some limitations. Returns: Type Description Union[pypeln.sync.stage.Stage[~B], pypeln.utils.Partial[pypeln.sync.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/sync/api/map.py def map ( f : MapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data. Its should behave exactly like python's built-in `map` function. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.sync.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # [1, 2, 3, ..., 10] ``` Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: This parameter is not used and only kept for API compatibility with the other modules. maxsize: This parameter is not used and only kept for API compatibility with the other modules. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). !!! warning To implement `timeout` we use `stopit.ThreadingTimeout` which has some limitations. Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage_ = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Map ( f ), timeout = timeout , dependencies = [ stage_ ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.sync.map"},{"location":"api/sync/ordered/","text":"pl.sync.ordered Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . thread . map ( slow_squared , stage , workers = 2 ) stage = pl . sync . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Since sync.map preserves order, instead we used thread.map so this example made sense. Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters: Name Type Description Default stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Union[pypeln.sync.stage.Stage[~A], pypeln.utils.Partial[pypeln.sync.stage.Stage[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/sync/api/ordered.py def ordered ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.thread.map(slow_squared, stage, workers = 2) stage = pl.sync.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` Since `sync.map` preserves order, instead we used `thread.map` so this example made sense. !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : ordered ( stage )) stage_ = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Ordered (), timeout = 0 , dependencies = [ stage_ ], on_start = None , on_done = None , f_args = [], )","title":"ordered"},{"location":"api/sync/ordered/#plsyncordered","text":"Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . thread . map ( slow_squared , stage , workers = 2 ) stage = pl . sync . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Since sync.map preserves order, instead we used thread.map so this example made sense. Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters: Name Type Description Default stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Union[pypeln.sync.stage.Stage[~A], pypeln.utils.Partial[pypeln.sync.stage.Stage[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/sync/api/ordered.py def ordered ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.thread.map(slow_squared, stage, workers = 2) stage = pl.sync.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` Since `sync.map` preserves order, instead we used `thread.map` so this example made sense. !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : ordered ( stage )) stage_ = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Ordered (), timeout = 0 , dependencies = [ stage_ ], on_start = None , on_done = None , f_args = [], )","title":"pl.sync.ordered"},{"location":"api/sync/run/","text":"pl.sync.run Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . sync . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . sync . run ( stage ) Parameters: Name Type Description Default stages Union[pypeln.sync.stage.Stage[~A], Iterable[~A]] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. () maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 Source code in pypeln/sync/api/run.py def run ( * stages : tp . Union [ Stage [ A ], tp . Iterable [ A ]], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.sync.each(slow_fn, data, workers=6) # execute pipeline pl.sync.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: This parameter is not used and only kept for API compatibility with the other modules. \"\"\" if len ( stages ) == 0 : return elif len ( stages ) == 1 : stage = to_iterable ( stages [ 0 ], maxsize = maxsize ) else : stage = concat ( list ( stages ), maxsize = maxsize ) for _ in stage : pass","title":"run"},{"location":"api/sync/run/#plsyncrun","text":"Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . sync . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . sync . run ( stage ) Parameters: Name Type Description Default stages Union[pypeln.sync.stage.Stage[~A], Iterable[~A]] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. () maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 Source code in pypeln/sync/api/run.py def run ( * stages : tp . Union [ Stage [ A ], tp . Iterable [ A ]], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.sync.each(slow_fn, data, workers=6) # execute pipeline pl.sync.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: This parameter is not used and only kept for API compatibility with the other modules. \"\"\" if len ( stages ) == 0 : return elif len ( stages ) == 1 : stage = to_iterable ( stages [ 0 ], maxsize = maxsize ) else : stage = concat ( list ( stages ), maxsize = maxsize ) for _ in stage : pass","title":"pl.sync.run"},{"location":"api/sync/to_iterable/","text":"pl.sync.to_iterable Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the maxsize argument can help you avoid OOM error if the consumer is slow. Parameters: Name Type Description Default stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 return_index bool When set to True the resulting iterable will yield the Elemen(index: Tuple[int, ...], value: Any) which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. False Returns: Type Description Union[Iterable[~A], pypeln.utils.Partial[Iterable[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/sync/api/to_iterable.py def to_iterable ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False , ) -> tp . Union [ tp . Iterable [ A ], pypeln_utils . Partial [ tp . Iterable [ A ]]]: \"\"\" Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the `maxsize` argument can help you avoid OOM error if the consumer is slow. Arguments: stage: A Stage or Iterable. maxsize: This parameter is not used and only kept for API compatibility with the other modules. return_index: When set to `True` the resulting iterable will yield the `Elemen(index: Tuple[int, ...], value: Any)` which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize , return_index = return_index ) ) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable","title":"to_iterable"},{"location":"api/sync/to_iterable/#plsyncto_iterable","text":"Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the maxsize argument can help you avoid OOM error if the consumer is slow. Parameters: Name Type Description Default stage Union[pypeln.sync.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int This parameter is not used and only kept for API compatibility with the other modules. 0 return_index bool When set to True the resulting iterable will yield the Elemen(index: Tuple[int, ...], value: Any) which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. False Returns: Type Description Union[Iterable[~A], pypeln.utils.Partial[Iterable[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/sync/api/to_iterable.py def to_iterable ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False , ) -> tp . Union [ tp . Iterable [ A ], pypeln_utils . Partial [ tp . Iterable [ A ]]]: \"\"\" Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the `maxsize` argument can help you avoid OOM error if the consumer is slow. Arguments: stage: A Stage or Iterable. maxsize: This parameter is not used and only kept for API compatibility with the other modules. return_index: When set to `True` the resulting iterable will yield the `Elemen(index: Tuple[int, ...], value: Any)` which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize , return_index = return_index ) ) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable","title":"pl.sync.to_iterable"},{"location":"api/task/Overview/","text":"pl.task The task module lets you create pipelines using objects from python's asyncio module according to Pypeln's general architecture . Use this module when you are in need to perform efficient asynchronous IO operations and DONT need to perform heavy CPU operations. Most functions in this module return a pl.task.Stage object which implement the Iterable , AsyncIterable , and Awaitable interfaces which enables you to combine it seamlessly with regular Python code. Awaitable You can call await con any pl.thread.Stage to get back the results of its computation: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 async def main () data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = await stage # e.g. [5, 6, 9, 4, 8, 10, 7] asyncio . run ( main ()) When calling await on a stage you will get back the same result if you called list on it with be big difference that you wont block the current thread while waiting for the computation to materialize. AsyncIterable task Stages are asynchronous generators so you can iterate through them using async for to get access each new element as soon as it become available: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 async def main () data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) async for element in stage : pritn ( element ) # 5, 6, 9, 4, 8, 10, 7 asyncio . run ( main ()) When iterating a stage using async for you will get back the same result as if you called the normal for on it with be big difference that you wont block the current thread while waiting for the next element. Event Loop When you run a task stage all the tasks will be scheduled in the event loop on the current thread if it exists, else Pypeln will create and keep alive a new event loop. Members concat each filter flat_map from_iterable map ordered run to_iterable","title":"Overview"},{"location":"api/task/Overview/#pltask","text":"The task module lets you create pipelines using objects from python's asyncio module according to Pypeln's general architecture . Use this module when you are in need to perform efficient asynchronous IO operations and DONT need to perform heavy CPU operations. Most functions in this module return a pl.task.Stage object which implement the Iterable , AsyncIterable , and Awaitable interfaces which enables you to combine it seamlessly with regular Python code.","title":"pl.task"},{"location":"api/task/Overview/#pypeln.task--awaitable","text":"You can call await con any pl.thread.Stage to get back the results of its computation: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 async def main () data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) data = await stage # e.g. [5, 6, 9, 4, 8, 10, 7] asyncio . run ( main ()) When calling await on a stage you will get back the same result if you called list on it with be big difference that you wont block the current thread while waiting for the computation to materialize.","title":"Awaitable"},{"location":"api/task/Overview/#pypeln.task--asynciterable","text":"task Stages are asynchronous generators so you can iterate through them using async for to get access each new element as soon as it become available: import pypeln as pl import asyncio from random import random async def slow_add1 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x + 1 async def slow_gt3 ( x ): await asyncio . sleep ( random ()) # <= some slow computation return x > 3 async def main () data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . task . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . task . filter ( slow_gt3 , stage , workers = 2 ) async for element in stage : pritn ( element ) # 5, 6, 9, 4, 8, 10, 7 asyncio . run ( main ()) When iterating a stage using async for you will get back the same result as if you called the normal for on it with be big difference that you wont block the current thread while waiting for the next element.","title":"AsyncIterable"},{"location":"api/task/Overview/#pypeln.task--event-loop","text":"When you run a task stage all the tasks will be scheduled in the event loop on the current thread if it exists, else Pypeln will create and keep alive a new event loop.","title":"Event Loop"},{"location":"api/task/Overview/#members","text":"concat each filter flat_map from_iterable map ordered run to_iterable","title":"Members"},{"location":"api/task/concat/","text":"pl.task.concat Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . process . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters: Name Type Description Default stages List[Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A]]] A list of Stage, Iterable or AsyncIterable. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Stage A stage object. Source code in pypeln/task/api/concat.py def concat ( stages : tp . List [ tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ]]], maxsize : int = 0 , ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.process.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: A list of Stage, Iterable or AsyncIterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" dependencies : tp . List [ Stage [ A ]] = [ to_stage ( stage , maxsize = maxsize ) for stage in stages ] return Stage ( process_fn = Concat (), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = len ( dependencies ), dependencies = dependencies , on_start = None , on_done = None , f_args = [], )","title":"concat"},{"location":"api/task/concat/#pltaskconcat","text":"Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . process . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters: Name Type Description Default stages List[Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A]]] A list of Stage, Iterable or AsyncIterable. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Stage A stage object. Source code in pypeln/task/api/concat.py def concat ( stages : tp . List [ tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ]]], maxsize : int = 0 , ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.process.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: A list of Stage, Iterable or AsyncIterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" dependencies : tp . List [ Stage [ A ]] = [ to_stage ( stage , maxsize = maxsize ) for stage in stages ] return Stage ( process_fn = Concat (), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = len ( dependencies ), dependencies = dependencies , on_start = None , on_done = None , f_args = [], )","title":"pl.task.concat"},{"location":"api/task/each/","text":"pl.task.each Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . process . each ( process_image , file_paths , workers = 4 ) pl . process . run ( stage ) or alternatively files_paths = get_file_paths () pl . process . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f EachFn A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. If each is running inside another coroutine / task then avoid using run=True since it will block the event loop, use await pl.task.each(...) instead. False Returns: Type Description Union[pypeln.task.stage.Stage[~B], NoneType, pypeln.utils.Partial[Union[pypeln.task.stage.Stage[~B]]]] If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . Source code in pypeln/task/api/each.py def each ( f : EachFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , run : bool = False , ) -> tp . Union [ tp . Optional [ Stage [ B ]], pypeln_utils . Partial [ tp . Optional [ Stage [ B ]]]]: \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.process.each(process_image, file_paths, workers=4) pl.process.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.process.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. If each is running inside another coroutine / task then avoid using `run=True` since it will block the event loop, use `await pl.task.each(...)` instead. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) stage = Stage ( process_fn = Each ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = 1 , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), ) if not run : return stage for _ in stage : pass","title":"each"},{"location":"api/task/each/#pltaskeach","text":"Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . process . each ( process_image , file_paths , workers = 4 ) pl . process . run ( stage ) or alternatively files_paths = get_file_paths () pl . process . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f EachFn A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. If each is running inside another coroutine / task then avoid using run=True since it will block the event loop, use await pl.task.each(...) instead. False Returns: Type Description Union[pypeln.task.stage.Stage[~B], NoneType, pypeln.utils.Partial[Union[pypeln.task.stage.Stage[~B]]]] If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . Source code in pypeln/task/api/each.py def each ( f : EachFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , run : bool = False , ) -> tp . Union [ tp . Optional [ Stage [ B ]], pypeln_utils . Partial [ tp . Optional [ Stage [ B ]]]]: \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.process.each(process_image, file_paths, workers=4) pl.process.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.process.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. If each is running inside another coroutine / task then avoid using `run=True` since it will block the event loop, use `await pl.task.each(...)` instead. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) stage = Stage ( process_fn = Each ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = 1 , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), ) if not run : return stage for _ in stage : pass","title":"pl.task.each"},{"location":"api/task/filter/","text":"pl.task.filter Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f FilterFn A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.task.stage.Stage[~A], pypeln.utils.Partial[pypeln.task.stage.Stage[~A]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/task/api/filter.py def filter ( f : FilterFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage, Iterable or AsyncIterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Filter ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = 1 , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"filter"},{"location":"api/task/filter/#pltaskfilter","text":"Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f FilterFn A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.task.stage.Stage[~A], pypeln.utils.Partial[pypeln.task.stage.Stage[~A]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/task/api/filter.py def filter ( f : FilterFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage, Iterable or AsyncIterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Filter ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = 1 , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.task.filter"},{"location":"api/task/flat_map/","text":"pl.task.flat_map Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . process . map ( f , stage ) = pl . process . flat_map ( lambda x : [ f ( x )], stage ) pl . process . filter ( f , stage ) = pl . process . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters: Name Type Description Default f FlatMapFn A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.task.stage.Stage[~B], pypeln.utils.Partial[pypeln.task.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/task/api/flat_map.py def flat_map ( f : FlatMapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.process.map(f, stage) = pl.process.flat_map(lambda x: [f(x)], stage) pl.process.filter(f, stage) = pl.process.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage, Iterable or AsyncIterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = FlatMap ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = 1 , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"flat_map"},{"location":"api/task/flat_map/#pltaskflat_map","text":"Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . process . map ( f , stage ) = pl . process . flat_map ( lambda x : [ f ( x )], stage ) pl . process . filter ( f , stage ) = pl . process . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters: Name Type Description Default f FlatMapFn A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.task.stage.Stage[~B], pypeln.utils.Partial[pypeln.task.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/task/api/flat_map.py def flat_map ( f : FlatMapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.process.map(f, stage) = pl.process.flat_map(lambda x: [f(x)], stage) pl.process.filter(f, stage) = pl.process.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage, Iterable or AsyncIterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = FlatMap ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = 1 , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.task.flat_map"},{"location":"api/task/from_iterable/","text":"pl.task.from_iterable Creates a stage from an iterable. This function gives you more control of the iterable is consumed. Parameters: Name Type Description Default iterable Union[Iterable[~T], AsyncIterable[~T], pypeln.utils.Undefined] A source Iterable or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> use_thread bool This parameter is not used and only kept for API compatibility with the other modules. True Returns: Type Description Union[pypeln.task.stage.Stage[~T], pypeln.utils.Partial[pypeln.task.stage.Stage[~T]]] Returns a Stage if the iterable parameters is given, else it returns a Partial . Source code in pypeln/task/api/from_iterable.py def from_iterable ( iterable : tp . Union [ tp . Iterable [ T ], tp . AsyncIterable [ T ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , use_thread : bool = True , maxsize : int = 0 , ) -> tp . Union [ Stage [ T ], pypeln_utils . Partial [ Stage [ T ]]]: \"\"\" Creates a stage from an iterable. This function gives you more control of the iterable is consumed. Arguments: iterable: A source Iterable or AsyncIterable. use_thread: This parameter is not used and only kept for API compatibility with the other modules. Returns: Returns a `Stage` if the `iterable` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( iterable , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , use_thread = use_thread ) ) return Stage ( process_fn = FromIterable ( iterable , maxsize = maxsize ), workers = 1 , maxsize = maxsize , total_sources = 1 , timeout = 0 , dependencies = [], on_start = None , on_done = None , f_args = [], )","title":"from_iterable"},{"location":"api/task/from_iterable/#pltaskfrom_iterable","text":"Creates a stage from an iterable. This function gives you more control of the iterable is consumed. Parameters: Name Type Description Default iterable Union[Iterable[~T], AsyncIterable[~T], pypeln.utils.Undefined] A source Iterable or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> use_thread bool This parameter is not used and only kept for API compatibility with the other modules. True Returns: Type Description Union[pypeln.task.stage.Stage[~T], pypeln.utils.Partial[pypeln.task.stage.Stage[~T]]] Returns a Stage if the iterable parameters is given, else it returns a Partial . Source code in pypeln/task/api/from_iterable.py def from_iterable ( iterable : tp . Union [ tp . Iterable [ T ], tp . AsyncIterable [ T ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , use_thread : bool = True , maxsize : int = 0 , ) -> tp . Union [ Stage [ T ], pypeln_utils . Partial [ Stage [ T ]]]: \"\"\" Creates a stage from an iterable. This function gives you more control of the iterable is consumed. Arguments: iterable: A source Iterable or AsyncIterable. use_thread: This parameter is not used and only kept for API compatibility with the other modules. Returns: Returns a `Stage` if the `iterable` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( iterable , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , use_thread = use_thread ) ) return Stage ( process_fn = FromIterable ( iterable , maxsize = maxsize ), workers = 1 , maxsize = maxsize , total_sources = 1 , timeout = 0 , dependencies = [], on_start = None , on_done = None , f_args = [], )","title":"pl.task.from_iterable"},{"location":"api/task/map/","text":"pl.task.map Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f MapFn A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.task.stage.Stage[~B], pypeln.utils.Partial[pypeln.task.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/task/api/map.py def map ( f : MapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage, Iterable or AsyncIterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Map ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = 1 , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"map"},{"location":"api/task/map/#pltaskmap","text":"Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . process . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f MapFn A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.task.stage.Stage[~B], pypeln.utils.Partial[pypeln.task.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/task/api/map.py def map ( f : MapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.process.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage, Iterable or AsyncIterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Map ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = 1 , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.task.map"},{"location":"api/task/ordered/","text":"pl.task.ordered Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . process . map ( slow_squared , stage , workers = 2 ) stage = pl . process . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters: Name Type Description Default stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable, or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Union[pypeln.task.stage.Stage[~A], pypeln.utils.Partial[pypeln.task.stage.Stage[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/task/api/ordered.py def ordered ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.process.map(slow_squared, stage, workers = 2) stage = pl.process.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A Stage, Iterable, or AsyncIterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : ordered ( stage )) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Ordered (), workers = 1 , maxsize = 0 , timeout = 0 , total_sources = 1 , dependencies = [ stage ], on_start = None , on_done = None , f_args = [], )","title":"ordered"},{"location":"api/task/ordered/#pltaskordered","text":"Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . process . map ( slow_squared , stage , workers = 2 ) stage = pl . process . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters: Name Type Description Default stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable, or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Union[pypeln.task.stage.Stage[~A], pypeln.utils.Partial[pypeln.task.stage.Stage[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/task/api/ordered.py def ordered ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.process.map(slow_squared, stage, workers = 2) stage = pl.process.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A Stage, Iterable, or AsyncIterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : ordered ( stage )) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Ordered (), workers = 1 , maxsize = 0 , timeout = 0 , total_sources = 1 , dependencies = [ stage ], on_start = None , on_done = None , f_args = [], )","title":"pl.task.ordered"},{"location":"api/task/run/","text":"pl.task.run Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . process . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . process . run ( stage ) Parameters: Name Type Description Default stages Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A]] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. () maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Source code in pypeln/task/api/run.py def run ( * stages : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ]], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.process.each(slow_fn, data, workers=6) # execute pipeline pl.process.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if len ( stages ) == 0 : return elif len ( stages ) == 1 : stage = to_iterable ( stages [ 0 ], maxsize = maxsize ) else : stage = concat ( list ( stages ), maxsize = maxsize ) for _ in stage : pass","title":"run"},{"location":"api/task/run/#pltaskrun","text":"Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . process . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . process . run ( stage ) Parameters: Name Type Description Default stages Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A]] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. () maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Source code in pypeln/task/api/run.py def run ( * stages : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ]], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.process.each(slow_fn, data, workers=6) # execute pipeline pl.process.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if len ( stages ) == 0 : return elif len ( stages ) == 1 : stage = to_iterable ( stages [ 0 ], maxsize = maxsize ) else : stage = concat ( list ( stages ), maxsize = maxsize ) for _ in stage : pass","title":"pl.task.run"},{"location":"api/task/to_iterable/","text":"pl.task.to_iterable Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the maxsize argument can help you avoid OOM error if the consumer is slow. Parameters: Name Type Description Default stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable, or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 return_index bool When set to True the resulting iterable will yield the Elemen(index: Tuple[int, ...], value: Any) which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. False Returns: Type Description Union[Iterable[~A], pypeln.utils.Partial[Iterable[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/task/api/to_iterable.py def to_iterable ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False , ) -> tp . Union [ tp . Iterable [ A ], pypeln_utils . Partial [ tp . Iterable [ A ]]]: \"\"\" Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the `maxsize` argument can help you avoid OOM error if the consumer is slow. Arguments: stage: A Stage, Iterable, or AsyncIterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. return_index: When set to `True` the resulting iterable will yield the `Elemen(index: Tuple[int, ...], value: Any)` which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) elif isinstance ( stage , tp . Iterable [ A ]): return stage else : iterable = from_iterable ( stage ) . to_iterable ( maxsize = maxsize , return_index = return_index ) return iterable","title":"to_iterable"},{"location":"api/task/to_iterable/#pltaskto_iterable","text":"Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the maxsize argument can help you avoid OOM error if the consumer is slow. Parameters: Name Type Description Default stage Union[pypeln.task.stage.Stage[~A], Iterable[~A], AsyncIterable[~A], pypeln.utils.Undefined] A Stage, Iterable, or AsyncIterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 return_index bool When set to True the resulting iterable will yield the Elemen(index: Tuple[int, ...], value: Any) which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. False Returns: Type Description Union[Iterable[~A], pypeln.utils.Partial[Iterable[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/task/api/to_iterable.py def to_iterable ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . AsyncIterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False , ) -> tp . Union [ tp . Iterable [ A ], pypeln_utils . Partial [ tp . Iterable [ A ]]]: \"\"\" Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the `maxsize` argument can help you avoid OOM error if the consumer is slow. Arguments: stage: A Stage, Iterable, or AsyncIterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. return_index: When set to `True` the resulting iterable will yield the `Elemen(index: Tuple[int, ...], value: Any)` which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) elif isinstance ( stage , tp . Iterable [ A ]): return stage else : iterable = from_iterable ( stage ) . to_iterable ( maxsize = maxsize , return_index = return_index ) return iterable","title":"pl.task.to_iterable"},{"location":"api/thread/Overview/","text":"pl.thread The thread module lets you create pipelines using objects from python's threading module according to Pypeln's general architecture . Use this module when you are in need to perform some synchronous IO operations and DONT need to perform heavy CPU operations. Most functions in this module return a pl.thread.Stage object which implement the Iterable interface which enables you to combine it seamlessly with regular Python code. Iterable You can iterate over any p.thread.Stage to get back the results of its computation: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . thread . filter ( slow_gt3 , stage , workers = 2 ) for x in stage : print ( x ) # e.g. 5, 6, 9, 4, 8, 10, 7 At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously. Members concat each filter flat_map from_iterable map ordered run to_iterable","title":"Overview"},{"location":"api/thread/Overview/#plthread","text":"The thread module lets you create pipelines using objects from python's threading module according to Pypeln's general architecture . Use this module when you are in need to perform some synchronous IO operations and DONT need to perform heavy CPU operations. Most functions in this module return a pl.thread.Stage object which implement the Iterable interface which enables you to combine it seamlessly with regular Python code.","title":"pl.thread"},{"location":"api/thread/Overview/#pypeln.thread--iterable","text":"You can iterate over any p.thread.Stage to get back the results of its computation: import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) stage = pl . thread . filter ( slow_gt3 , stage , workers = 2 ) for x in stage : print ( x ) # e.g. 5, 6, 9, 4, 8, 10, 7 At each stage the you can specify the numbers of workers . The maxsize parameter limits the maximum amount of elements that the stage can hold simultaneously.","title":"Iterable"},{"location":"api/thread/Overview/#members","text":"concat each filter flat_map from_iterable map ordered run to_iterable","title":"Members"},{"location":"api/thread/concat/","text":"pl.thread.concat Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . thread . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters: Name Type Description Default stages List[Union[pypeln.thread.stage.Stage[~A], Iterable[~A]]] A list of stages or iterables. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Stage A stage object. Source code in pypeln/thread/api/concat.py def concat ( stages : tp . List [ tp . Union [ Stage [ A ], tp . Iterable [ A ]]], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.thread.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: A list of stages or iterables. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" dependencies = [ to_stage ( stage , maxsize = maxsize ) for stage in stages ] return Stage ( process_fn = Concat (), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = sum ( stage . workers for stage in dependencies ), dependencies = dependencies , on_start = None , on_done = None , f_args = [], )","title":"concat"},{"location":"api/thread/concat/#plthreadconcat","text":"Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. import pypeln as pl stage_1 = [ 1 , 2 , 3 ] stage_2 = [ 4 , 5 , 6 , 7 ] stage_3 = pl . thread . concat ([ stage_1 , stage_2 ]) # e.g. [1, 4, 5, 2, 6, 3, 7] Parameters: Name Type Description Default stages List[Union[pypeln.thread.stage.Stage[~A], Iterable[~A]]] A list of stages or iterables. required maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Stage A stage object. Source code in pypeln/thread/api/concat.py def concat ( stages : tp . List [ tp . Union [ Stage [ A ], tp . Iterable [ A ]]], maxsize : int = 0 ) -> Stage : \"\"\" Concatenates / merges many stages into a single one by appending elements from each stage as they come, order is not preserved. ```python import pypeln as pl stage_1 = [1, 2, 3] stage_2 = [4, 5, 6, 7] stage_3 = pl.thread.concat([stage_1, stage_2]) # e.g. [1, 4, 5, 2, 6, 3, 7] ``` Arguments: stages: A list of stages or iterables. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: A stage object. \"\"\" dependencies = [ to_stage ( stage , maxsize = maxsize ) for stage in stages ] return Stage ( process_fn = Concat (), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = sum ( stage . workers for stage in dependencies ), dependencies = dependencies , on_start = None , on_done = None , f_args = [], )","title":"pl.thread.concat"},{"location":"api/thread/each/","text":"pl.thread.each Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . thread . each ( process_image , file_paths , workers = 4 ) pl . thread . run ( stage ) or alternatively files_paths = get_file_paths () pl . thread . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f EachFn A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Returns: Type Description Union[pypeln.thread.stage.Stage[NoneType], NoneType, pypeln.utils.Partial[Union[pypeln.thread.stage.Stage[NoneType]]]] If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . Source code in pypeln/thread/api/each.py def each ( f : EachFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , run : bool = False , ) -> tp . Union [ tp . Optional [ Stage [ None ]], pypeln_utils . Partial [ tp . Optional [ Stage [ None ]]]]: \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.thread.each(process_image, file_paths, workers=4) pl.thread.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.thread.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) stage = Stage ( process_fn = Each ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), ) if not run : return stage for _ in stage : pass","title":"each"},{"location":"api/thread/each/#plthreadeach","text":"Creates a stage that runs the function f for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: import pypeln as pl def process_image ( image_path ): image = load_image ( image_path ) image = transform_image ( image ) save_image ( image_path , image ) files_paths = get_file_paths () stage = pl . thread . each ( process_image , file_paths , workers = 4 ) pl . thread . run ( stage ) or alternatively files_paths = get_file_paths () pl . thread . each ( process_image , file_paths , workers = 4 , run = True ) Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f EachFn A function with signature f(x) -> None . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None run bool Whether or not to execute the stage immediately. False Returns: Type Description Union[pypeln.thread.stage.Stage[NoneType], NoneType, pypeln.utils.Partial[Union[pypeln.thread.stage.Stage[NoneType]]]] If the stage parameters is not given then this function returns a Partial , else if run=False (default) it return a new stage, if run=True then it runs the stage and returns None . Source code in pypeln/thread/api/each.py def each ( f : EachFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , run : bool = False , ) -> tp . Union [ tp . Optional [ Stage [ None ]], pypeln_utils . Partial [ tp . Optional [ Stage [ None ]]]]: \"\"\" Creates a stage that runs the function `f` for each element in the data but the stage itself yields no elements. Its useful for sink stages that perform certain actions such as writting to disk, saving to a database, etc, and dont produce any results. For example: ```python import pypeln as pl def process_image(image_path): image = load_image(image_path) image = transform_image(image) save_image(image_path, image) files_paths = get_file_paths() stage = pl.thread.each(process_image, file_paths, workers=4) pl.thread.run(stage) ``` or alternatively ```python files_paths = get_file_paths() pl.thread.each(process_image, file_paths, workers=4, run=True) ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> None`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). run: Whether or not to execute the stage immediately. Returns: If the `stage` parameters is not given then this function returns a `Partial`, else if `run=False` (default) it return a new stage, if `run=True` then it runs the stage and returns `None`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : each ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) stage = Stage ( process_fn = Each ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), ) if not run : return stage for _ in stage : pass","title":"pl.thread.each"},{"location":"api/thread/filter/","text":"pl.thread.filter Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f FilterFn A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.thread.stage.Stage[~B], pypeln.utils.Partial[pypeln.thread.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/thread/api/filter.py def filter ( f : FilterFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Filter ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"filter"},{"location":"api/thread/filter/#plthreadfilter","text":"Creates a stage that filter the data given a predicate function f . It is intended to behave like python's built-in filter function but with the added concurrency. import pypeln as pl import time from random import random def slow_gt3 ( x ): time . sleep ( random ()) # <= some slow computation return x > 3 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . filter ( slow_gt3 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [5, 6, 3, 4, 7, 8, 9] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f FilterFn A function with signature f(x) -> bool . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.thread.stage.Stage[~B], pypeln.utils.Partial[pypeln.thread.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/thread/api/filter.py def filter ( f : FilterFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that filter the data given a predicate function `f`. It is intended to behave like python's built-in `filter` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_gt3(x): time.sleep(random()) # <= some slow computation return x > 3 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.filter(slow_gt3, data, workers=3, maxsize=4) data = list(stage) # e.g. [5, 6, 3, 4, 7, 8, 9] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with signature `f(x) -> bool`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : filter ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Filter ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.thread.filter"},{"location":"api/thread/flat_map/","text":"pl.thread.flat_map Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . thread . map ( f , stage ) = pl . thread . flat_map ( lambda x : [ f ( x )], stage ) pl . thread . filter ( f , stage ) = pl . thread . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters: Name Type Description Default f FlatMapFn A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.thread.stage.Stage[~B], pypeln.utils.Partial[pypeln.thread.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/thread/api/flat_map.py def flat_map ( f : FlatMapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.thread.map(f, stage) = pl.thread.flat_map(lambda x: [f(x)], stage) pl.thread.filter(f, stage) = pl.thread.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = FlatMap ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"flat_map"},{"location":"api/thread/flat_map/#plthreadflat_map","text":"Creates a stage that maps a function f over the data, however unlike pypeln.process.map in this case f returns an iterable. As its name implies, flat_map will flatten out these iterables so the resulting stage just contains their elements. import pypeln as pl import time from random import random def slow_integer_pair ( x ): time . sleep ( random ()) # <= some slow computation if x == 0 : yield x else : yield x yield - x data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . flat_map ( slow_integer_pair , data , workers = 3 , maxsize = 4 ) list ( stage ) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] Note Because of concurrency order is not guaranteed. flat_map is a more general operation, you can actually implement pypeln.process.map and pypeln.process.filter with it, for example: import pypeln as pl pl . thread . map ( f , stage ) = pl . thread . flat_map ( lambda x : [ f ( x )], stage ) pl . thread . filter ( f , stage ) = pl . thread . flat_map ( lambda x : [ x ] if f ( x ) else [], stage ) Using flat_map with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Parameters: Name Type Description Default f FlatMapFn A function with signature f(x) -> iterable . f can accept additional arguments by name as described in Advanced Usage . required stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.thread.stage.Stage[~B], pypeln.utils.Partial[pypeln.thread.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/thread/api/flat_map.py def flat_map ( f : FlatMapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data, however unlike `pypeln.process.map` in this case `f` returns an iterable. As its name implies, `flat_map` will flatten out these iterables so the resulting stage just contains their elements. ```python import pypeln as pl import time from random import random def slow_integer_pair(x): time.sleep(random()) # <= some slow computation if x == 0: yield x else: yield x yield -x data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.flat_map(slow_integer_pair, data, workers=3, maxsize=4) list(stage) # e.g. [2, -2, 3, -3, 0, 1, -1, 6, -6, 4, -4, ...] ``` !!! note Because of concurrency order is not guaranteed. `flat_map` is a more general operation, you can actually implement `pypeln.process.map` and `pypeln.process.filter` with it, for example: ```python import pypeln as pl pl.thread.map(f, stage) = pl.thread.flat_map(lambda x: [f(x)], stage) pl.thread.filter(f, stage) = pl.thread.flat_map(lambda x: [x] if f(x) else [], stage) ``` Using `flat_map` with a generator function is very useful as e.g. you are able to filter out unwanted elements when there are exceptions, missing data, etc. Arguments: f: A function with signature `f(x) -> iterable`. `f` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : flat_map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = FlatMap ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.thread.flat_map"},{"location":"api/thread/from_iterable/","text":"pl.thread.from_iterable Creates a stage from an iterable. This function gives you more control of the iterable is consumed. Parameters: Name Type Description Default iterable Union[Iterable[~T], pypeln.utils.Undefined] A source Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> use_thread bool This parameter is not used and only kept for API compatibility with the other modules. True Returns: Type Description Union[pypeln.thread.stage.Stage[~T], pypeln.utils.Partial[pypeln.thread.stage.Stage[~T]]] Returns a Stage if the iterable parameters is given, else it returns a Partial . Source code in pypeln/thread/api/from_iterable.py def from_iterable ( iterable : tp . Union [ tp . Iterable [ T ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , use_thread : bool = True , maxsize : int = 0 , ) -> tp . Union [ Stage [ T ], pypeln_utils . Partial [ Stage [ T ]]]: \"\"\" Creates a stage from an iterable. This function gives you more control of the iterable is consumed. Arguments: iterable: A source Iterable. use_thread: This parameter is not used and only kept for API compatibility with the other modules. Returns: Returns a `Stage` if the `iterable` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( iterable , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , use_thread = use_thread ) ) return Stage ( process_fn = FromIterable ( iterable , maxsize = maxsize ), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = 1 , dependencies = [], on_start = None , on_done = None , f_args = [], )","title":"from_iterable"},{"location":"api/thread/from_iterable/#plthreadfrom_iterable","text":"Creates a stage from an iterable. This function gives you more control of the iterable is consumed. Parameters: Name Type Description Default iterable Union[Iterable[~T], pypeln.utils.Undefined] A source Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> use_thread bool This parameter is not used and only kept for API compatibility with the other modules. True Returns: Type Description Union[pypeln.thread.stage.Stage[~T], pypeln.utils.Partial[pypeln.thread.stage.Stage[~T]]] Returns a Stage if the iterable parameters is given, else it returns a Partial . Source code in pypeln/thread/api/from_iterable.py def from_iterable ( iterable : tp . Union [ tp . Iterable [ T ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , use_thread : bool = True , maxsize : int = 0 , ) -> tp . Union [ Stage [ T ], pypeln_utils . Partial [ Stage [ T ]]]: \"\"\" Creates a stage from an iterable. This function gives you more control of the iterable is consumed. Arguments: iterable: A source Iterable. use_thread: This parameter is not used and only kept for API compatibility with the other modules. Returns: Returns a `Stage` if the `iterable` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( iterable , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda iterable : from_iterable ( iterable , use_thread = use_thread ) ) return Stage ( process_fn = FromIterable ( iterable , maxsize = maxsize ), workers = 1 , maxsize = maxsize , timeout = 0 , total_sources = 1 , dependencies = [], on_start = None , on_done = None , f_args = [], )","title":"pl.thread.from_iterable"},{"location":"api/thread/map/","text":"pl.thread.map Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f MapFn A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.thread.stage.Stage[~B], pypeln.utils.Partial[pypeln.thread.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/thread/api/map.py def map ( f : MapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Map ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"map"},{"location":"api/thread/map/#plthreadmap","text":"Creates a stage that maps a function f over the data. Its intended to behave like python's built-in map function but with the added concurrency. import pypeln as pl import time from random import random def slow_add1 ( x ): time . sleep ( random ()) # <= some slow computation return x + 1 data = range ( 10 ) # [0, 1, 2, ..., 9] stage = pl . thread . map ( slow_add1 , data , workers = 3 , maxsize = 4 ) data = list ( stage ) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] Note Because of concurrency order is not guaranteed. Parameters: Name Type Description Default f MapFn A function with the signature f(x) -> y . f can accept special additional arguments by name as described in Advanced Usage . required stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> workers int The number of workers the stage should contain. 1 maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 timeout float Seconds before stoping the worker if its current task is not yet completed. Defaults to 0 which means its unbounded. 0 on_start Callable A function with signature on_start(worker_info?) -> kwargs? , where kwargs can be a dict of keyword arguments that can be consumed by f and on_done . on_start can accept additional arguments by name as described in Advanced Usage . None on_done Callable A function with signature on_done(stage_status?) . This function is executed once per worker when the worker finishes. on_done can accept additional arguments by name as described in Advanced Usage . None Returns: Type Description Union[pypeln.thread.stage.Stage[~B], pypeln.utils.Partial[pypeln.thread.stage.Stage[~B]]] Returns a Stage if the stage parameters is given, else it returns a Partial . Source code in pypeln/thread/api/map.py def map ( f : MapFn , stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , workers : int = 1 , maxsize : int = 0 , timeout : float = 0 , on_start : tp . Callable = None , on_done : tp . Callable = None , ) -> tp . Union [ Stage [ B ], pypeln_utils . Partial [ Stage [ B ]]]: \"\"\" Creates a stage that maps a function `f` over the data. Its intended to behave like python's built-in `map` function but with the added concurrency. ```python import pypeln as pl import time from random import random def slow_add1(x): time.sleep(random()) # <= some slow computation return x + 1 data = range(10) # [0, 1, 2, ..., 9] stage = pl.thread.map(slow_add1, data, workers=3, maxsize=4) data = list(stage) # e.g. [2, 1, 5, 6, 3, 4, 7, 8, 9, 10] ``` !!! note Because of concurrency order is not guaranteed. Arguments: f: A function with the signature `f(x) -> y`. `f` can accept special additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). stage: A Stage or Iterable. workers: The number of workers the stage should contain. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. timeout: Seconds before stoping the worker if its current task is not yet completed. Defaults to `0` which means its unbounded. on_start: A function with signature `on_start(worker_info?) -> kwargs?`, where `kwargs` can be a `dict` of keyword arguments that can be consumed by `f` and `on_done`. `on_start` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). on_done: A function with signature `on_done(stage_status?)`. This function is executed once per worker when the worker finishes. `on_done` can accept additional arguments by name as described in [Advanced Usage](https://cgarciae.github.io/pypeln/advanced/#dependency-injection). Returns: Returns a `Stage` if the `stage` parameters is given, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : map ( f , stage = stage , workers = workers , maxsize = maxsize , timeout = timeout , on_start = on_start , on_done = on_done , ) ) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Map ( f ), workers = workers , maxsize = maxsize , timeout = timeout , total_sources = stage . workers , dependencies = [ stage ], on_start = on_start , on_done = on_done , f_args = pypeln_utils . function_args ( f ), )","title":"pl.thread.map"},{"location":"api/thread/ordered/","text":"pl.thread.ordered Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . thread . map ( slow_squared , stage , workers = 2 ) stage = pl . thread . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters: Name Type Description Default stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Union[pypeln.thread.stage.Stage[~A], pypeln.utils.Partial[pypeln.thread.stage.Stage[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/thread/api/ordered.py def ordered ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.thread.map(slow_squared, stage, workers = 2) stage = pl.thread.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : ordered ( stage )) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Ordered (), workers = 1 , maxsize = 0 , timeout = 0 , total_sources = stage . workers , dependencies = [ stage ], on_start = None , on_done = None , f_args = [], )","title":"ordered"},{"location":"api/thread/ordered/#plthreadordered","text":"Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. import pypeln as pl import random import time def slow_squared ( x ): time . sleep ( random . random ()) return x ** 2 stage = range ( 5 ) stage = pl . thread . map ( slow_squared , stage , workers = 2 ) stage = pl . thread . ordered ( stage ) print ( list ( stage )) # [0, 1, 4, 9, 16] Note ordered will work even if the previous stages are from different pypeln modules, but it may not work if you introduce an itermediate external iterable stage. Warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Parameters: Name Type Description Default stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Returns: Type Description Union[pypeln.thread.stage.Stage[~A], pypeln.utils.Partial[pypeln.thread.stage.Stage[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/thread/api/ordered.py def ordered ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , ) -> tp . Union [ Stage [ A ], pypeln_utils . Partial [ Stage [ A ]]]: \"\"\" Creates a stage that sorts its elements based on their order of creation on the source iterable(s) of the pipeline. ```python import pypeln as pl import random import time def slow_squared(x): time.sleep(random.random()) return x ** 2 stage = range(5) stage = pl.thread.map(slow_squared, stage, workers = 2) stage = pl.thread.ordered(stage) print(list(stage)) # [0, 1, 4, 9, 16] ``` !!! note `ordered` will work even if the previous stages are from different `pypeln` modules, but it may not work if you introduce an itermediate external iterable stage. !!! warning This stage will not yield util it accumulates all of the elements from the previous stage, use this only if all elements fit in memory. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : ordered ( stage )) stage = to_stage ( stage , maxsize = maxsize ) return Stage ( process_fn = Ordered (), workers = 1 , maxsize = 0 , timeout = 0 , total_sources = stage . workers , dependencies = [ stage ], on_start = None , on_done = None , f_args = [], )","title":"pl.thread.ordered"},{"location":"api/thread/run/","text":"pl.thread.run Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . thread . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . thread . run ( stage ) Parameters: Name Type Description Default stages Union[pypeln.thread.stage.Stage[~A], Iterable[~A]] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. () maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Source code in pypeln/thread/api/run.py def run ( * stages : tp . Union [ Stage [ A ], tp . Iterable [ A ]], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.thread.each(slow_fn, data, workers=6) # execute pipeline pl.thread.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if len ( stages ) == 0 : return elif len ( stages ) == 1 : stage = to_iterable ( stages [ 0 ], maxsize = maxsize ) else : stage = concat ( list ( stages ), maxsize = maxsize ) for _ in stage : pass","title":"run"},{"location":"api/thread/run/#plthreadrun","text":"Iterates over one or more stages until their iterators run out of elements. import pypeln as pl data = get_data () stage = pl . thread . each ( slow_fn , data , workers = 6 ) # execute pipeline pl . thread . run ( stage ) Parameters: Name Type Description Default stages Union[pypeln.thread.stage.Stage[~A], Iterable[~A]] A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using concat before iterating. () maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 Source code in pypeln/thread/api/run.py def run ( * stages : tp . Union [ Stage [ A ], tp . Iterable [ A ]], maxsize : int = 0 ) -> None : \"\"\" Iterates over one or more stages until their iterators run out of elements. ```python import pypeln as pl data = get_data() stage = pl.thread.each(slow_fn, data, workers=6) # execute pipeline pl.thread.run(stage) ``` Arguments: stages: A stage/iterable or list of stages/iterables to be iterated over. If a list is passed, stages are first merged using `concat` before iterating. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. \"\"\" if len ( stages ) == 0 : return elif len ( stages ) == 1 : stage = to_iterable ( stages [ 0 ], maxsize = maxsize ) else : stage = concat ( list ( stages ), maxsize = maxsize ) for _ in stage : pass","title":"pl.thread.run"},{"location":"api/thread/to_iterable/","text":"pl.thread.to_iterable Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the maxsize argument can help you avoid OOM error if the consumer is slow. Parameters: Name Type Description Default stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 return_index bool When set to True the resulting iterable will yield the Elemen(index: Tuple[int, ...], value: Any) which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. False Returns: Type Description Union[Iterable[~A], pypeln.utils.Partial[Iterable[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/thread/api/to_iterable.py def to_iterable ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False , ) -> tp . Union [ tp . Iterable [ A ], pypeln_utils . Partial [ tp . Iterable [ A ]]]: \"\"\" Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the `maxsize` argument can help you avoid OOM error if the consumer is slow. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. return_index: When set to `True` the resulting iterable will yield the `Elemen(index: Tuple[int, ...], value: Any)` which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable","title":"to_iterable"},{"location":"api/thread/to_iterable/#plthreadto_iterable","text":"Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the maxsize argument can help you avoid OOM error if the consumer is slow. Parameters: Name Type Description Default stage Union[pypeln.thread.stage.Stage[~A], Iterable[~A], pypeln.utils.Undefined] A Stage or Iterable. <pypeln.utils.Undefined object at 0x7f27e00aaaf0> maxsize int The maximum number of objects the stage can hold simultaneously, if set to 0 (default) then the stage can grow unbounded. 0 return_index bool When set to True the resulting iterable will yield the Elemen(index: Tuple[int, ...], value: Any) which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. False Returns: Type Description Union[Iterable[~A], pypeln.utils.Partial[Iterable[~A]]] If the stage parameters is given then this function returns an iterable, else it returns a Partial . Source code in pypeln/thread/api/to_iterable.py def to_iterable ( stage : tp . Union [ Stage [ A ], tp . Iterable [ A ], pypeln_utils . Undefined ] = pypeln_utils . UNDEFINED , maxsize : int = 0 , return_index : bool = False , ) -> tp . Union [ tp . Iterable [ A ], pypeln_utils . Partial [ tp . Iterable [ A ]]]: \"\"\" Creates an iterable from a stage. Use this function to when you want to have more control over how the output stage is consumed, especifically, setting the `maxsize` argument can help you avoid OOM error if the consumer is slow. Arguments: stage: A Stage or Iterable. maxsize: The maximum number of objects the stage can hold simultaneously, if set to `0` (default) then the stage can grow unbounded. return_index: When set to `True` the resulting iterable will yield the `Elemen(index: Tuple[int, ...], value: Any)` which contains both the resulting value and the index parameter which holds information about the order of creation of the elements at the source. Returns: If the `stage` parameters is given then this function returns an iterable, else it returns a `Partial`. \"\"\" if isinstance ( stage , pypeln_utils . Undefined ): return pypeln_utils . Partial ( lambda stage : to_iterable ( stage , maxsize = maxsize )) if isinstance ( stage , Stage ): iterable = stage . to_iterable ( maxsize = maxsize , return_index = return_index ) else : iterable = stage return iterable","title":"pl.thread.to_iterable"}]}